
@inject IHttpClientBase client;

@if (items.HasItems())
{
    <FluentSelect Items="@items"
                  @onchange="ItemChangedHandle"
                  OptionValue="@(x=>x!.Id.ToString())"
                  OptionText="@(x=>x!.Name)"
                  SelectedOption="@Item"
                  Label="@Label" />
}
else
{
    <FluentProgressRing />
}

@code {
    [Parameter]
    public int? DefaultId { get; set; }

    private DepartmentDto? item;

    [Parameter]
    public required DepartmentDto Item
    {
        get
        {
            return item ?? new DepartmentDto();
        }
        set
        {
            if (item == value) return;
            item = value;
            ItemChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<DepartmentDto> ItemChanged { get; set; }

    [Parameter]
    public bool WithBGD { get; set; } = false;

    [Parameter]
    public string Label { get; set; } = "Đơn vị";

    private void ItemChangedHandle(ChangeEventArgs e)
    => Item = items.First(x => x.Id == int.Parse(e.Value?.ToString() ?? string.Empty));

    private IEnumerable<DepartmentDto> items = Enumerable.Empty<DepartmentDto>();


    protected override async Task OnInitializedAsync()
    {
        var apiResult = await client.GetAsync<ResultDto<DepartmentDto>>(DepartmentApiRoute.All(DepartmentApiRoute.ControllerName));
        if (apiResult != null && apiResult.Dtos != null)
        {
            var list = apiResult.Dtos!.ToList();
            if (WithBGD is false)
            {
                var i = list.ToList().First(x => x.Id == 1);
                list.Remove(i);
                items = list.AsEnumerable();
            }
            else
            {
                items = list.AsEnumerable();
            }
            if (DefaultId.HasValue && DefaultId > 0)
            {
                Item = items.First(d => d.Id == DefaultId);
            }
            else
                Item = items.First();
        }
    }
}