@inject IHttpClientBase client

@if (items.HasItems())
{
    <FluentSelect Items="@items"
    @onchange="ItemChangedHandle"
    OptionValue="@(x=>x!.Id.ToString())"
    OptionText="@(x=>x!.Name)"
    SelectedOption="@Item"
    Label="@Label" />
}
else
{
    <FluentProgressRing />
}
@code {
    [Parameter]
    public int? DefaultId { get; set; }

    private RewardDto? item;

    [Parameter]
    public required RewardDto Item
    {
        get
        {
            return item ?? new RewardDto();
        }
        set
        {
            if (item == value) return;
            item = value;
            ItemChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<RewardDto> ItemChanged { get; set; }
    [Parameter]
    public string? Classify { get; set; }//chỉ có 3 loại (cá nhân, tập thể, quý): CN, TT, Q
    [Parameter]
    public string Label { get; set; } = "Hình thức";

    private void ItemChangedHandle(ChangeEventArgs e)
    => Item = items.First(x => x.Id == int.Parse(e.Value?.ToString() ?? string.Empty));

    private IEnumerable<RewardDto> items = Enumerable.Empty<RewardDto>();

    protected override async Task OnInitializedAsync()
    {
        var apiResult = await client.GetAsync<ResultDto<RewardDto>>(RewardApiRoute.All(RewardApiRoute.ControllerName));
        if (apiResult != null && apiResult.Dtos != null)
        {
            if (!string.IsNullOrEmpty(Classify))
            {
                items = apiResult.Dtos.Where(x => x.Classify == Classify);
            }
            else
                items = apiResult.Dtos;
            if (items.HasItems())
            {
                if (DefaultId > 0)
                {
                    Item = items!.First(x => x.Id == DefaultId);
                }
                else
                    Item = items!.First();
            }
        }
    }
}