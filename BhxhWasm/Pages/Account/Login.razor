 @page "/Account/login"

@using BhxhWasm.Services
@inject NavigationManager Navigation
@inject AuthenticationStateProvider provider 
<PageTitle>Log in</PageTitle>
<h3>Log in</h3>

<h2>Use a local account to log in.</h2>
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <AlertMessage Message="@errorMessage" />
        <EditForm Model="loginModel" method="post" OnValidSubmit="HandleLogin" FormName="login">
            <DataAnnotationsValidator/>
            <FluentValidationSummary class="text-danger" role="alert" /> 
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Email" @bind-Value="loginModel.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%" />
                <FluentValidationMessage For="() => loginModel.Email" class="text-danger" />
                <FluentTextField type="password" Name="Password" @bind-Value="loginModel.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%" />
                <FluentValidationMessage For="() => loginModel.Password" class="text-danger" />
                <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">@ConstName.Login</FluentButton>
                <div>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@(Navigation.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = "/" }))">Register as a new user</FluentAnchor>
                    </p>
                </div>
            </FluentStack>
        </EditForm>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="8">
        <h3>Use another service to log in.</h3>
        <hr />
    </FluentGridItem>
</FluentGrid>

@code {
    private string? errorMessage;

    LoginDto loginModel { get; set; } = new LoginDto();
    private async Task HandleLogin()
    {
        
        var authStateProvider = (CustomAuthStateProvider)provider;
        var formResult = await authStateProvider.LoginAsync(loginModel);
        if (formResult.IsSuccess)
        {
            errorMessage = formResult.Message.ToString();
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = formResult.Message.ToString();
        }
    }
} 