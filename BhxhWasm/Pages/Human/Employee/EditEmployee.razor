@page "/Human/Employee/EditEmployee/{EmployeeId:int}"
@inject IHttpClientBase client

<PageTitle>@ConstName.TitleEditStaff</PageTitle>
<AuthorizeView Roles="tccb,admin">
    <Authorized>
        <LabelHeader Text="@ConstName.TitleEditStaff" />
        @if (employeeDto is null)
        {
            <LoadPage />
        }
        else
        {
            <div style="height:500px">
                <AlertMessage Message="@Message" />
                <FluentGrid>
                    <FluentGridItem>
                        <FluentTextField Label="Họ và tên lót" @bind-Value="@employeeDto.FirstName" />
                        <FluentTextField Label="Tên" @bind-Value="@employeeDto.LastName" />
                        <FluentDatePicker @bind-Value="ngaySinh" Label="Ngày sinh"   DayFormat="DayFormat.TwoDigit" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("vi-VN"))" />
                        <FluentTextField Label="Số căn cước" @bind-Value="@employeeDto.IdentityCard" />
                        <SelectListSQ @bind-Item="scSelected" DefaultId="employeeDto.SalaryCoefficientId" />
                        @* <FluentTextArea Cols="30" ReadOnly Label="Hệ số lương" @bind-Value="@employeeDto.SalaryCoefficientId" /> *@
                    </FluentGridItem>
                    <FluentGridItem>
                        <SelectListPosition @bind-Item="posSelected" DefaultId="employeeDto.PostId" />
                        <SelectListDepartment @bind-Item="deptSelected" DefaultId="employeeDto.DeptId" />
                        <FluentStack Orientation="Orientation.Vertical">
                            <FluentNumberField @bind-Value="employeeDto.SortOrder" Label="Vị trí sắp xếp GĐ, PGĐ = 10, TP=20, CV=30,..." />
                            <FluentCheckbox Label="Nghỉ việc ?" @bind-Value="@employeeDto.IsQuitJob" />
                            <FluentCheckbox Label="Giới tính (nữ để trống)" @bind-Value="@employeeDto.Gender" />
                        </FluentStack>
                    </FluentGridItem>
                </FluentGrid>
                <div style="margin:30px">
                    <FluentButton Appearance=Appearance.Accent IconStart="@(new Icons.Regular.Size16.Save())" @onclick="SaveStaffBtn">@ConstName.BtnSave</FluentButton>
                </div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <AlertMessage Message=@InfoMessage.NotAuthorized />
    </NotAuthorized>
</AuthorizeView>
@code {
    [Parameter]
    public int EmployeeId { get; set; }
    DepartmentDto? deptSelected;
    PositionDto? posSelected;
    EmployeeDto? employeeDto;
    DateTime? ngaySinh;
    IList<string>? errors = [];
    string? Message;
    SalaryCoefficientDto? scSelected;
    //byte quarter;

    protected override async Task OnInitializedAsync()
    {
       
            if (EmployeeId > 0)
            {
                var result = await client.GetAsync<ResultDto<EmployeeDto>>(EmployeeApiRoute.GetOne(EmployeeApiRoute.ControllerName, EmployeeId));
                if (result != null && result.IsSuccess && result.Dto != null)
                {
                    employeeDto = result.Dto;
                    ngaySinh = employeeDto.Birthdate;
                }
            }
            else
            {
                employeeDto = new() { PostId = 10, Birthdate = DateTime.Now.AddYears(-24) };
            }
            //StateHasChanged();
        
    }

    async void SaveStaffBtn()
    {
        if (employeeDto is not null)
        {
            bool canPost = true;
            if (posSelected is null)
            {
                errors?.Add(InfoMessage.Unselect("chức vụ"));
                canPost = false;
            }
            else
                employeeDto.PostId = posSelected.Id;

            if (deptSelected is null)
            {
                errors?.Add(InfoMessage.Unselect("phòng ban"));
                canPost = false;
            }
            else
                employeeDto.DeptId = deptSelected.Id;
            if (scSelected is null)
            {
                errors?.Add(InfoMessage.Unselect("hệ số lương"));
            }
            else
                employeeDto.SalaryCoefficientId = scSelected.Id;

            if (canPost)
            {
                employeeDto.Birthdate = ngaySinh!.Value;
                if (EmployeeId > 0)
                {
                    var ok = await client.PutAsync<EmployeeDto,ResultDto<bool>>(EmployeeApiRoute.Update(EmployeeApiRoute.ControllerName, EmployeeId), employeeDto);
                    Message = InfoMessage.CrudResult(CRUD.Update, ok?.IsSuccess, "Nhân viên"); ;
                }
                else
                {
                    var ok = await client.PostAsync<EmployeeDto,ResultDto<bool>>(EmployeeApiRoute.Create(EmployeeApiRoute.ControllerName), employeeDto);
                    Message = InfoMessage.CrudResult(CRUD.Create, ok?.IsSuccess,"Nhân viên");
                }
            }
            else
                Message = errors?.ToErrorString();
            StateHasChanged();
        }
    }
}